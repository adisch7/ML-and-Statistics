import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
import statsmodels.formula.api as smf
import statsmodels.genmod as gm

'''First Version'''
# # Read the CSV file
# coefficient_df2 = pd.read_csv(r'C:\Users\Adi\Downloads\R table2 for Noam.csv')

# # Convert specified columns to numeric, coercing errors to NaN
# columns_to_convert = ['S1', 'S2+S4', 'S3+S5']
# coefficient_df2[columns_to_convert] = coefficient_df2[columns_to_convert].apply(pd.to_numeric, errors='coerce')

# # Define the new index
# new_index = [
#     'TreesCover', 'BuildingsCover', 'BusinessCover', 'CemeteryCover', 'IndustrialCover', 'InfrastructureCover', 
#     'ParksCover', 'PublicInstitutionCover', 'ResidenceCover', 'SportsCover', 'NearestJlmPoleDistance', 
#     'Classification_HPS', 'Classification_LED', 'RoadsHierarchy_motorway', 'RoadsHierarchy_primary', 
#     'RoadsHierarchy_residential', 'RoadsHierarchy_secondary', 'RoadsHierarchy_tertiary', 'RoadsHierarchy_trunk'
# ]

# # Ensure the length of the new index matches the number of rows in the DataFrame
# if len(new_index) != len(coefficient_df2):
#     raise ValueError("The length of the new index does not match the number of rows in the DataFrame.")

# # Create the DataFrame with the new index
# _df = pd.DataFrame(coefficient_df2[columns_to_convert].values, columns=columns_to_convert, index=new_index)

# # Define custom colors for each column
# colors = ['#FF5733', '#33FF57', '#3357FF']  # Example colors for S1, S2+S4, S3+S5

# # Plot the DataFrame as a horizontal bar chart with custom colors
# ax = _df.plot.barh(color=colors)

# # Set x-axis limits to zoom in on values between -1 and 1
# plt.xlim(-1, 1)

# # Create custom legend handles
# legend_labels = ['S1: R^2 = 0.1807', 'S2+S4: R^2 = 0.2551', 'S3+S5: R^2 = 0.1979']
# handles = [mpatches.Patch(color=colors[i], label=legend_labels[i]) for i in range(len(legend_labels))]

# # Customize the legend with a smaller font size
# ax.legend(handles=handles, fontsize='small')

# # Add labels from the specified columns to each bar
# mark_columns = ['Mark S1', 'Mark S2+S4', 'Mark S3+S5']
# for i, col in enumerate(columns_to_convert):
#     container = ax.containers[i]
#     labels = coefficient_df2[mark_columns[i]].fillna('').tolist()
#     ax.bar_label(container, labels=labels, padding=3, color='black', fontsize=10)

# # Display the plot
# plt.title('GLM Coefficient Plot')
# plt.xlabel('Coefficient')
# plt.ylabel('Variable')
# plt.tight_layout()  # Adjust the layout to make sure everything fits well
# plt.show()

'''Second Version'''
# # Read the CSV file
# coefficient_df2 = pd.read_csv(r'C:\Users\Adi\Downloads\R table2 for Noam.csv')

# # Convert specified columns to numeric, coercing errors to NaN
# columns_to_convert = ['S1', 'S2+S4', 'S3+S5']
# coefficient_df2[columns_to_convert] = coefficient_df2[columns_to_convert].apply(pd.to_numeric, errors='coerce')

'''Validate second option'''
# Coefficient plot with Standardized Coefficient

# Read the CSV file
coefficient_df2 = pd.read_csv(r'C:\Users\Adi\OneDrive\Documents\LP\Thesis\R table2 for Noam_production version.csv')

# Convert specified columns to numeric, coercing errors to NaN
columns_to_convert = ['S1', 'S2+S4', 'S3+S5', 'S1+S2+S3+S4+S5']
coefficient_df2[columns_to_convert] = coefficient_df2[columns_to_convert].apply(pd.to_numeric, errors='coerce')

# Standardize coefficients
standardized_df = coefficient_df2[columns_to_convert].apply(lambda x: (x - x.mean()) / x.std(), axis=0)

# Define the new index
new_index = [
    'Trees_Cover', 'Buildings_Cover', 'Business_Cover', 'Cemetery_Cover', 'Industrial_Cover', 'Infrastructure_Cover', 
    'Parks_Cover', 'Public_Institution_Cover', 'Residence_Cover', 'Sports_Cover', 'Nearest_Jlm_Pole_Distance', 
    'Classification_HPS', 'Classification_LED', 'Roads_Hierarchy_motorway', 'Roads_Hierarchy_primary', 
    'Roads_Hierarchy_residential', 'Roads_Hierarchy_secondary', 'Roads_Hierarchy_tertiary', 'Roads_Hierarchy_trunk'
]

# Ensure the length of the new index matches the number of rows in the DataFrame
if len(new_index) != len(coefficient_df2):
    raise ValueError("The length of the new index does not match the number of rows in the DataFrame.")

# Create the DataFrame with the new index
_df = pd.DataFrame(standardized_df.values, columns=columns_to_convert, index=new_index)

# Define custom colors for each column
colors = ['#bc9b3c', '#e3f54d', '#27e89c', '#ed5cd7']  # Example colors for S1, S2+S4, S3+S5, S1+S2+S3+S4+S5

# Plot the DataFrame as a horizontal bar chart with custom colors
ax = _df.plot.barh(color=colors)

# Set x-axis limits to zoom in on standardized values (optional)
x_min, x_max = -1, 1
plt.xlim(x_min, x_max)

# Create custom legend handles
legend_labels = ['S1: R^2 = 0.1807', 'S2+S4: R^2 = 0.2551', 'S3+S5: R^2 = 0.1979', 'S1+S2+S3+S4+S5: R^2 = 0.1762']
handles = [mpatches.Patch(color=colors[i], label=legend_labels[i]) for i in range(len(legend_labels))]

# Customize the legend with a smaller font size
ax.legend(handles=handles, fontsize='xx-small')

# Add '*' signs from the 'Sign_S1', 'Sign_S2+S4', and 'Sign_S3+S5' columns to the respective bars
sign_columns = ['Sign_S1', 'Sign_S2+S4', 'Sign_S3+S5', 'Sign S1+S2+S3+S4+S5']

for i, row in coefficient_df2.iterrows():
    for j, col in enumerate(columns_to_convert):
        sign_col = sign_columns[j]  # Get the respective sign column
        sign = row[sign_col]  # Get the sign value for this row and column
        
        if sign == '*':  # Check if there's an asterisk
            # Get the standardized bar value for the respective column and index
            bar_value = _df.iloc[i, j]
            
            # Ensure the bar value is valid and within or beyond the xlim range
            if bar_value > x_max:
                ax.text(x_max - 0.04, i + (j - 1) * 0.2, '*', color='black', fontsize=12, verticalalignment='center')
            elif bar_value < x_min:
                ax.text(x_min + 0.02, i + (j - 1) * 0.2, '*', color='black', fontsize=12, verticalalignment='center')
            else:
                ax.text(bar_value + 0.02, i + (j - 1) * 0.2, '*', color='black', fontsize=12, verticalalignment='center')

# Display the plot
plt.title('GLM Coefficient Plot')
plt.xlabel('Coefficient')
plt.ylabel('Variable')
plt.show()

